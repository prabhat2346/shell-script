#######awk##########
for text processing
> command
> programming , there is no need to compile.

syntax
awk options 'pattern {actions}' filename
command | awk options 'pattern {actions}'


e.g 

awk 'NR==3 { print $2 }' /etc/passwd
awk 'NR>=3 { print $2 }' /etc/passwd   // all lines from 3, 4, 5,6,...
here NR==3 is the 3rd line
$2 is second filed of 3rd line. 
$0 :- Tp print whole line.
prabhat.ranjan@prabhatr:~$ awk -F ':' 'NR==3 {print $0}' /etc/passwd  
bin:x:2:2:bin:/bin:/usr/sbin/nologin
prabhat.ranjan@prabhatr:~$ awk -F ':' 'NR==3 {print $1}' /etc/passwd
bin
prabhat.ranjan@prabhatr:~$ awk -F ':' 'NR==3 {print $2}' /etc/passwd
x
prabhat.ranjan@prabhatr:~$ awk -F ':' 'NR==3 {print $3}' /etc/passwd
2
prabhat.ranjan@prabhatr:~$ awk -F ':' 'NR==3 {print $4}' /etc/passwd
2
prabhat.ranjan@prabhatr:~$ awk -F ':' 'NR==3 {print $5}' /etc/passwd
bin
prabhat.ranjan@prabhatr:~$ awk -F ':' 'NR==3 {print $6}' /etc/passwd
/bin
prabhat.ranjan@prabhatr:~$ awk -F ':' 'NR==3 {print $7}' /etc/passwd
/usr/sbin/nologin
prabhat.ranjan@prabhatr:~$ awk -F ':' 'NR==3 {print $8}' /etc/passwd

prabhat.ranjan@prabhatr:~$ 
######### Top five lines ############
prabhat.ranjan@prabhatr:~$ awk 'NR==1 {print $1} NR==2 {print $1} NR==3 {print $1} NR==4 {print $1} NR==5 {print $1}' /etc/passwd
root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
prabhat.ranjan@prabhatr:~$ 
####################
prabhat.ranjan@prabhatr:~$ awk 'NR==1 {print $1} NR==2 {print $1} NR==3 {print $1} NR==4 {print $1} NR==5 {print $1}' /etc/passwd
root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
prabhat.ranjan@prabhatr:~$ awk -F ':' 'NR==1 {print $1} NR==2 {print $1} NR==3 {print $1} NR==4 {print $1} NR==5 {print $1}' /etc/passwd
root
daemon
bin
sys
sync
prabhat.ranjan@prabhatr:~$ awk -F ':' 'NR==1 {print $2} NR==2 {print $2} NR==3 {print $2} NR==4 {print $2} NR==5 {print $2}' /etc/passwd
x
x
x
x
x
prabhat.ranjan@prabhatr:~$ awk -F ':' 'NR==1 {print $5} NR==2 {print $5} NR==3 {print $5} NR==4 {print $5} NR==5 {print $5}' /etc/passwd
root
daemon
bin
sys
sync
prabhat.ranjan@prabhatr:~$ awk -F ':' 'NR==1 {print $7} NR==2 {print $7} NR==3 {print $7} NR==4 {print $7} NR==5 {print $7}' /etc/passwd
/bin/bash
/usr/sbin/nologin
/usr/sbin/nologin
/usr/sbin/nologin
/bin/sync
prabhat.ranjan@prabhatr:~$ 


############ used filed seperaor / ##########
prabhat.ranjan@prabhatr:~$ awk -F '/' 'NR==1 {print $1} NR==2 {print $1} NR==3 {print $1} NR==4 {print $1} NR==5 {print $1}' /etc/passwd
root:x:0:0:root:
daemon:x:1:1:daemon:
bin:x:2:2:bin:
sys:x:3:3:sys:
sync:x:4:65534:sync:




optiins
-F >>  To specify a field seperator
space is default field seperator so no need to run with -F options
-v to declare a variable
-f to specify a file that contains a awk script
:  filed seperator
cat /etc/passwd | awk -F : '${print $1}'


Bsic variables 
$0,$1,$2
NR > No of records
NF > No of fields
FILENAME


 awk '{print $1}' awk.sh   // tp print all lines with 1st field
this
how
i

awk '{print $1,$3}' awk.sh

awk '{print NR,NF}' awk.sh
1 4   // In 1st record or line there is a total four field.
2 3
3 3
4 0


awk '{print $NF}' awk.sh      // print last record of each line.


awk '{print FILENAME,$1}' awk.sh

awk.sh this// it simply shows on which file are you working.
awk.sh how
awk.sh i
awk.sh 

e.g

/home/ec2-user

awk -F ec2 -v x=3 -v y=5 '${print,$2,x,y}'
o/p  -user 3 5



#######multiple field seperator(apace,/,+)############
php -v | awk -F '[ / +]' '/NTS/ {print $2}'

#######define a variable,dispaly a variable#############
awk 'BEGIN {a=5;print a} // we can define variable inside BEGIN BLOCK & also we can print

######awk_script########
itadmin@prabhat:~$ vim simple.awk 
itadmin@prabhat:~$ chmod +x simple.awk 
itadmin@prabhat:~$ awk -f simple.awk 
5
#!/bin/awk -f
BEGIN {
a=5;
print a
}



######read variable value from command line##########

We can provide input in awk by two method
1 command line
e.g echo "2 6" | awk '{print "a=" $1, "b=" $1}'
a=2 b=2

2. filename
vim abc.txt
itadmin@prabhat:~$ awk '{print "a=" $1, "b=" $1}'
^C
itadmin@prabhat:~$ awk '{print "a=" $1, "b=" $1}' abc.txt
a="2 b="2




For example :- 
sudo apt list --upgradable | awk -F [ '{print $1}' | awk -F all '{print $1}' |  awk -F amd64 '{print $1}' | sed 's/focal-updates/=/' | sed 's/\ //g'
sudo apt list --upgradable | cut -d [ -f 1 | cut -d ' ' -f2





















